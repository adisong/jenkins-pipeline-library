ext {
    jenkinsVersion = '2.164.1'
    jenkinsTestHarnessVersion = '2.48'
    pluginArtifacts = [
            "org.jenkins-ci.plugins:cloudbees-folder:6.7",
            "org.jenkins-ci.plugins:sonar:2.8.1",
            "org.jenkins-ci.plugins.workflow:workflow-aggregator:2.6",
            "org.jenkins-ci.plugins.workflow:workflow-api:2.33",
            "org.jenkins-ci.plugins.workflow:workflow-basic-steps:2.14",
            "org.jenkins-ci.plugins:pipeline-build-step:2.7",
            "org.jenkinsci.plugins:pipeline-model-definition:1.3.6",
            "org.jenkinsci.plugins:pipeline-model-declarative-agent:1.1.1",
            "org.jenkinsci.plugins:pipeline-model-extensions:1.3.6",
            "org.jenkins-ci.plugins.workflow:workflow-cps:2.64",
            "org.jenkins-ci.plugins:pipeline-input-step:2.9",
            "org.jenkins-ci.plugins.workflow:workflow-job:2.32",
            "org.jenkins-ci.plugins:pipeline-milestone-step:1.3.1",
            "org.jenkinsci.plugins:pipeline-model-api:1.3.6",
            "org.jenkins-ci.plugins.pipeline-stage-view:pipeline-rest-api:2.10",
            "org.jenkins-ci.plugins:script-security:1.54",
            "org.jenkins-ci.plugins:structs:1.17",
            "org.jenkins-ci.plugins.workflow:workflow-scm-step:2.7",
            "org.jenkins-ci.plugins.workflow:workflow-cps-global-lib:2.13",
            "org.jenkins-ci.plugins:pipeline-stage-step:2.3",
            "org.jenkinsci.plugins:pipeline-stage-tags-metadata:1.3.6",
            "org.jenkins-ci.plugins.pipeline-stage-view:pipeline-stage-view:2.10",
            "org.jenkins-ci.plugins:git-client:3.0.0-rc",
            "org.jenkins-ci.plugins:git:4.0.0-rc",
            "org.jenkins-ci.plugins.workflow:workflow-step-api:2.19",
            "org.jenkins-ci.plugins:credentials:2.1.18",
            "org.jenkins-ci.plugins:scm-api:2.3.0",
            "org.jenkins-ci.plugins:matrix-project:1.14",
            "org.jenkins-ci.plugins:junit:1.27",
            "org.jenkins-ci.plugins:credentials-binding:1.18",
            "org.jenkins-ci.plugins:git-server:1.7",
            "io.jenkins.docker:docker-plugin:1.1.6",
            "org.jenkins-ci.plugins:docker-workflow:1.17",
            "org.jenkins-ci.plugins:docker-commons:1.13",
            "org.jenkins-ci.plugins:docker-java-api:3.0.14",
            "org.jenkins-ci.plugins:authentication-tokens:1.3",
            "org.jenkins-ci.plugins:plain-credentials:1.5",
            "org.jenkins-ci.plugins.workflow:workflow-multibranch:2.21",
            "org.jenkins-ci.plugins:branch-api:2.1.2",
            "org.jenkins-ci.plugins.workflow:workflow-support:3.2",
            "org.jenkins-ci.plugins:ssh-credentials:1.15",
            "org.jenkins-ci.plugins:token-macro:2.7",
            "org.jenkins-ci.plugins:ssh-slaves:1.29.4",
            "org.jenkins-ci.plugins:gitlab-plugin:1.5.11",
            "org.jenkins-ci.plugins:authorize-project:1.3.0",
            "org.biouno:uno-choice:2.1",
            "com.mig82:folder-properties:1.0"
    ]
}

configurations {
    testPlugins {}

    // see JENKINS-45512
    testCompile {
        exclude group: 'xalan'
        exclude group: 'xerces'
    }
}

dependencies {
    // Jenkins test harness dependencies
    testCompile("org.jenkins-ci.main:jenkins-test-harness:${jenkinsTestHarnessVersion}"){
        exclude group: 'org.netbeans.modules', module: 'org-netbeans-insane'
    }
    testCompile "org.jenkins-ci.main:jenkins-war:${jenkinsVersion}"

    // plugins to install in test instance
    for (final plugin in project.ext.pluginArtifacts) {
        testPlugins(plugin) { dependency ->
            force = true
            artifact {
                name = dependency.name
                type = 'hpi'
            }
        }
        testCompile(plugin) { dependency ->
            force = true
            artifact {
                name = dependency.name
                type = 'jar'
            }
        }
    }
}

task resolveTestPlugins(type: Copy) {
    from configurations.testPlugins
    into new File(sourceSets.test.output.resourcesDir, 'test-dependencies')
    include '*.hpi'
    include '*.jpi'

    doLast {
        def baseNames = source.collect { it.name[0..it.name.lastIndexOf('.')-1] }
        new File(destinationDir, 'index').setText(baseNames.join('\n'), 'UTF-8')
    }
}